from flask import Flask, request, jsonify\nimport pytesseract\nfrom PIL import Image\nimport pdf2image\nimport os\nimport logging\n\n# Set up logging\nlogging.basicConfig(level=logging.DEBUG)\n\napp = Flask(__name__)\n\n# Log startup info\napp.logger.info('Starting Flask application')\n\n# Configure Tesseract to use Arabic language\npytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'  # Update this path to where Tesseract is installed\n\n@app.route('/')\ndef index():\n    app.logger.info('Serving index page')\n    return app.send_static_file('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef upload_file():\n    if 'file' not in request.files:\n        app.logger.error('No file part in request.')\n        return jsonify(error='No file part'), 400\n\n    file = request.files['file']\n\n    if file.filename == '':\n        app.logger.error('No selected file.')\n        return jsonify(error='No selected file'), 400\n\n    if file and allowed_file(file.filename):\n        filepath = os.path.join('uploads', file.filename)\n        file.save(filepath)\n\n        try:\n            app.logger.info(f'Processing file: {filepath}')\n            extracted_text = process_file(filepath)\n        except Exception as e:\n            app.logger.error(f'Error processing file: {e}')\n            return jsonify(error='Error processing file'), 500\n        finally:\n            os.remove(filepath)  # Clean up the uploaded file after processing\n        return jsonify(text=extracted_text)\n\n    app.logger.error('File type not allowed.')\n    return jsonify(error='File type not allowed'), 400\n\n\ndef allowed_file(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1].lower() in {'png', 'jpg', 'jpeg', 'pdf'}\n\n\ndef process_file(filepath):\n    _, file_extension = os.path.splitext(filepath)\n    text = ''\n\n    if file_extension.lower() == '.pdf':\n        images = pdf2image.convert_from_path(filepath)\n        for image in images:\n            text += pytesseract.image_to_string(image, lang='ara') + '\n'\n    else:\n        image = Image.open(filepath)\n        text = pytesseract.image_to_string(image, lang='ara')\n\n    return text\n\nif __name__ == '__main__':\n    os.makedirs('uploads', exist_ok=True)\n    app.logger.info('Flask application is about to start')\n    app.run(host='0.0.0.0', port=5000, debug=True)\n\napp.logger.info('Flask application has started and is listening on port 5000')
